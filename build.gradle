plugins {
    id 'fabric-loom' version '1.10.+'
}

version = project.mod_version
group   = project.maven_group

base {
    archivesName = project.archives_base_name
}

repositories {
    mavenCentral()
    maven { url = 'https://maven.fabricmc.net/' }

    // Optional mods repos
    maven { url = 'https://maven.terraformersmc.com/releases/' }  // ModMenu
    maven { url = 'https://maven.isxander.dev/releases' }         // YACL
    maven { url = 'https://api.modrinth.com/maven' }              // Modrinth (Xaero’s)
    maven { url = 'https://cursemaven.com' }                      // Fallback for Xaero’s
}

dependencies {
    // ---- Core ----
    minecraft "com.mojang:minecraft:${minecraft_version}"
    mappings  "net.fabricmc:yarn:${yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${fabric_api_version}"

    // ---- Optional integrations (compileOnly so you can build against them) ----
    // ModMenu
    modCompileOnly("com.terraformersmc:modmenu:${modmenu_version}")
    // YACL v3
    modCompileOnly("dev.isxander:yacl3-fabric:${yacl_version}")

    // Xaero’s Minimap + World Map (prefer Modrinth coords)
    modCompileOnly("maven.modrinth:xaeros-minimap:${xaero_minimap_version}")
    modCompileOnly("maven.modrinth:xaeros-world-map:${xaero_worldmap_version}")
    // If Modrinth versions aren’t available, use CurseMaven fallback (uncomment & set file IDs):
    // modCompileOnly("curse.maven:xaeros-minimap-263420:${xaero_minimap_fileId}")
    // modCompileOnly("curse.maven:xaeros-world-map-317780:${xaero_worldmap_fileId}")

    // ---- For dev runs where you want them loaded at runtime too (optional) ----
    modRuntimeOnly("com.terraformersmc:modmenu:${modmenu_version}")
    modRuntimeOnly("dev.isxander:yacl3-fabric:${yacl_version}")
    modRuntimeOnly("maven.modrinth:xaeros-minimap:${xaero_minimap_version}")
    modRuntimeOnly("maven.modrinth:xaeros-world-map:${xaero_worldmap_version}")
}

java {
    toolchain { languageVersion = JavaLanguageVersion.of(project.java_version as int) }
    withSourcesJar()
}

tasks.withType(JavaCompile).configureEach {
    options.release = project.java_version as int
}

// Use task registration API to avoid Gradle 10 deprecation
tasks.named("processResources") {
    def props = [
        version            : project.version,
        loader_version     : project.findProperty("loader_version"),
        minecraft_version  : project.findProperty("minecraft_version"),
        fabric_api_version : project.findProperty("fabric_api_version"),
        archives_base_name : project.findProperty("archives_base_name"),
        mod_version        : project.findProperty("mod_version"),
        java_version       : project.findProperty("java_version"),
        maven_group        : project.findProperty("maven_group")
    ]

    // Fail fast if any placeholders are missing
    props.each { k, v ->
        if (v == null || v.toString().trim().isEmpty()) {
            throw new GradleException("Missing gradle.properties entry for '${k}'")
        }
    }

    inputs.properties(props)
    filesMatching("fabric.mod.json") { expand(props) }
}
