plugins {
    id 'fabric-loom' version '1.10.+'
}

version = project.mod_version
group   = project.maven_group

repositories {
    mavenCentral()
    maven { url = 'https://maven.fabricmc.net/' }

    // Optional mods repos
    maven { url = 'https://maven.terraformersmc.com/releases/' }  // ModMenu
    maven { url = 'https://maven.isxander.dev/releases' }         // YACL
    maven { url = 'https://api.modrinth.com/maven' }              // Modrinth (Xaero’s)
    maven { url = 'https://cursemaven.com' }                      // Fallback for Xaero’s
}

dependencies {
    // Core
    minecraft "com.mojang:minecraft:${minecraft_version}"
    mappings  "net.fabricmc:yarn:${yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${fabric_api_version}"

    // ── Optional integrations (compileOnly so we can compile against them if present) ──
    // ModMenu
    modCompileOnly("com.terraformersmc:modmenu:${modmenu_version}")
    // YACL v3
    modCompileOnly("dev.isxander:yacl3-fabric:${yacl_version}")

    // Xaero’s Minimap + World Map (use one of Modrinth or CurseMaven coords)
    // Prefer Modrinth:
    modCompileOnly("maven.modrinth:xaeros-minimap:${xaero_minimap_version}")
    modCompileOnly("maven.modrinth:xaeros-world-map:${xaero_worldmap_version}")
    // If Modrinth versions aren’t available for your target, uncomment CurseMaven lines and set the file IDs:
    // modCompileOnly("curse.maven:xaeros-minimap-263420:${xaero_minimap_fileId}")
    // modCompileOnly("curse.maven:xaeros-world-map-317780:${xaero_worldmap_fileId}")

    // For dev runs where you want them loaded at runtime too (not required in CI):
    modRuntimeOnly("com.terraformersmc:modmenu:${modmenu_version}")
    modRuntimeOnly("dev.isxander:yacl3-fabric:${yacl_version}")
    modRuntimeOnly("maven.modrinth:xaeros-minimap:${xaero_minimap_version}")
    modRuntimeOnly("maven.modrinth:xaeros-world-map:${xaero_worldmap_version}")
}

java {
    toolchain { languageVersion = JavaLanguageVersion.of(project.java_version as int) }
    withSourcesJar()
}

tasks.withType(JavaCompile).configureEach {
    options.release = project.java_version as int
}

processResources {
    // All placeholders used in fabric.mod.json (and friends)
    def props = [
        version            : version,
        loader_version     : loader_version,
        minecraft_version  : minecraft_version,
        fabric_api_version : fabric_api_version,
        archives_base_name : archives_base_name,
        mod_version        : mod_version,
        java_version       : java_version,
        maven_group        : maven_group
    ]
    inputs.properties(props)
    filesMatching("fabric.mod.json") { expand(props) }
}
